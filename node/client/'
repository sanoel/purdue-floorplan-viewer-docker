/*
  This component renders information for a selected room. It
  shows up in the Viewer component when a room is selected.
  It also lists people that have been assigned to the room
  as clickable links to their respective PersonInfo pages.
*/
import React from 'react'
import {connect} from 'cerebral-view-react'
import styles from './share-dialog.css'
import classNames from 'classnames/bind'
import { AutoComplete, Chip, Checkbox, Dialog, Popover, Paper, TextField, FontIcon, Divider, RaisedButton, DropDownMenu, MenuItem, FlatButton} from 'material-ui'

let roomOptions = ['208 V', '220 V', '480 V', 'Single Phase', 'Three Phase']

export default connect(props => ({
  share: `roominfo.room_edits.shares.${props.index}`,
  editing: 'roominfo.editing',
  open: 'roominfo.room_edits.dialog.open',
  departments: 'personinfo.departments',
  roomTypes: 'roominfo.room_types',
}), {
  roomTypeChanged: 'roominfo.roomTypeChanged',
  departmentUsingChanged: 'roominfo.departmentUsingChanged',
  departmentAssignedChanged: 'roominfo.departmentAssignedChanged',
  percentChanged: 'roominfo.percentChanged',
  stationsChanged: 'roominfo.stationsChanged',
  noteChanged: 'roominfo.noteChanged',
  addShareButtonClicked: 'roominfo.addShareButtonClicked',
  removeShareButtonClicked: 'roominfo.removeShareButtonClicked',
  roomOptionChanged: 'roominfo.roomOptionChanged',
},

class ShareDialog extends React.Component {

  handleTouchTap(event, share) {
    console.log(share)
    event.preventDefault();
    this.setState({
      share,
      anchorEl: event.currentTarget,
    });
  };

  handleRequestClose() {
    this.setState({
      open: false,
    });
  };

  render() {
    let departmentMenuItems =this.props.departments.map((dept, i) => (
      <MenuItem key={'department-item-'+i} value={i} primaryText={dept} />
    ))
    let roomTypeMenuItems =this.props.roomTypes.map((type, i) => (
      <MenuItem key={'roomtype-item-'+i} value={i} primaryText={type} />
    ))

    const actions = [
      <FlatButton
        label="Cancel"
        primary={true}
        onTouchTap={this.handleRequestClose}
      />,
      <FlatButton
        label="Submit"
        primary={true}
        keyboardFocused={true}
        onTouchTap={this.handleRequestClose}
      />
    ];

    let share = this.props.share
    console.log(share)

    return (
      <Dialog
        title="Edit a room share"
        actions={actions}
        modal={false}
        open={this.props.open}
        className={styles['share-dialog']}
        onRequestClose={this.handleRequestClose}>
        Room Type  
        <DropDownMenu 
          style={{width: 'auto'}}
          value={this.props.roomTypes.findIndex(x => x === share.type)} 
          onChange={(evt, j, value)=>{this.props.roomTypeChanged({type:this.props.roomTypes[value], share: this.props.index})}}>
          {roomTypeMenuItems}
        </DropDownMenu> 
        <Divider />
        Share   
        <TextField
          id={'roominfo-percent-textfield'}
          style={{width: 'auto'}}
          hintText={`e.g., "25"`}
          value={share.percent}
          onChange={(evt, newValue)=>{this.props.percentChanged({percent:newValue, share: this.props.index})}}
        />
        Area: {share.area} ft<sup>2</sup>
        <Divider />
        Department Assigned
        <DropDownMenu 
          style={{width: 'auto'}}
          value={this.props.departments.findIndex(x => x === share.assigned)} 
          onChange={(evt, j, value)=>{this.props.departmentAssignedChanged({assigned:this.props.departments[value], share: this.props.index})}}>
           {departmentMenuItems}
        </DropDownMenu>
        <Divider />
        Department Using
        <DropDownMenu 
          style={{width: 'auto'}}
          value={this.props.departments.findIndex(x => x === share.using)} 
          onChange={(evt, j, value)=>{this.props.departmentUsingChanged({using:this.props.departments[value], share: this.props.index})}}>
          {departmentMenuItems}
        </DropDownMenu>
        <Divider />
        Number of Stations  
        <TextField
          style={{width: 'auto'}}
          id={'roominfo-stations-textfield'}
          hintText='e.g., 5' 
          value={share.stations}
          onChange={(evt, newValue)=>{this.props.stationsChanged({stations:newValue, share: this.props.index})}}
        />
        <Divider />
        Assigned People
        <AutoComplete
          searchText={this.props.newPersonText}
          hintText={`Assign a new person, e.g. "John Smith"`}
          dataSource={this.props.matches.map((match) => (match.name))}
          onNewRequest={(text, idx)=>{this.props.personMatchSelected({edgeCollection: this.props.edgeCollection, edgeType: this.props.edgeType, prefix: this.props.prefix, idx, text, match:this.props.matches[idx]})}}
          onUpdateInput={(searchText)=>{this.props.newPersonTextChanged({edgeCollection: this.props.edgeCollection, edgeType: this.props.edgeType, prefix: this.props.prefix, text:searchText})}}
        />
        {share.persons.map((person, index) => (
          <Chip
            onRequestDelete={(evt)=>{this.props.removePersonButtonClicked({edgeCollection: this.props.edgeCollection, edgeType: this.props.edgeType, prefix: this.props.prefix, person, from: this.props.from, index, to:person._id})}}
            onTouchTap={()=>{this.props.personPageRequested({person:person.name})}}>
            {person.name}
          </Chip>
        ))}
        Description: {this.props.share.note}
        <Divider />
        Internal Note
         {roomOptions.map((opt) =>
           <Checkbox
              key={'share-'+(this.props.index)+'-'+opt}
              label={opt}
              switched={(share.note.indexOf(opt) !== -1)}
              onCheck={(evt, value) => {this.props.roomOptionChanged({value, opt, share: this.props.index})}}
            />
          )}
        {share.note}
      </Dialog>
    )
  }
})
